buildscript {
	repositories {
		mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        if (project.projectVersion.endsWith('-SNAPSHOT')) {
            maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
        }
	}
	dependencies {
		classpath "org.graceframework:grace-gradle-plugin:$graceVersion"
        classpath "io.github.gradle-nexus:publish-plugin:1.3.0"
	}
}

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY')
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : ("${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg")
ext.isReleaseVersion = !projectVersion.endsWith("SNAPSHOT")

version project.projectVersion
group "org.graceframework.plugins"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "java-library"
apply plugin: "org.graceframework.grace-plugin"
apply plugin: "org.graceframework.grace-gsp"
apply plugin: "io.github.gradle-nexus.publish-plugin"
apply plugin: "maven-publish"
apply plugin: "signing"

repositories {
	mavenCentral()
    if (project.projectVersion.endsWith('-SNAPSHOT')) {
        maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    }
}

configurations {
    documentation
}

dependencies {
	implementation "org.graceframework:grace-web"
	implementation "org.graceframework:grace-web-databinding"
	implementation "org.graceframework:grace-web-gsp"
	implementation "org.graceframework:grace-plugin-validation"
	implementation "org.graceframework:grace-datastore-core:$gormVersion"
	implementation "org.graceframework:grace-datastore-gorm:$gormVersion"
	implementation "org.graceframework:grace-scaffolding-core:$scaffoldingVersion"
	implementation "commons-lang:commons-lang:2.6"
	compileOnly "org.graceframework:grace-boot"
	compileOnly "jakarta.servlet:jakarta.servlet-api:$servletApiVersion"

    documentation "org.fusesource.jansi:jansi:$jansiVersion"
	documentation "com.github.javaparser:javaparser-core:$javaParserCoreVersion"

	testImplementation "org.graceframework:grace-test-support"
	testImplementation "org.graceframework.plugins:scaffolding:$scaffoldingVersion"
	testImplementation "org.spockframework:spock-core:$spockVersion"
	testImplementation "net.bytebuddy:byte-buddy:$bytebuddyVersion"
	testImplementation "org.objenesis:objenesis:$objenesisVersion"
	testImplementation "org.apache.groovy:groovy-test-junit5:$groovyVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testImplementation "org.junit.platform:junit-platform-runner:$junitJupiterPlatformVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    testImplementation("org.jodd:jodd-wot:$joddWotVersion") {
        exclude module: 'slf4j-api'
        exclude module: 'asm'
    }
}

groovydoc.doFirst {
    classpath += (configurations.documentation + configurations.compileClasspath)
}

bootJar.enabled = false

sourceCompatibility = 17
targetCompatibility = 17

java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            from components.java

            afterEvaluate {
                artifact source: "${project.sourceSets.main.groovy.outputDir}/META-INF/grails-plugin.xml",
                        classifier: "plugin",
                        extension: 'xml'
            }
            pom {
                name = "Grace Fields Plugin"
                description = "Customizable form-field rendering based on overrideable GSP template"
                url = 'https://github.com/graceframework/grace-fields'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'rainboyan'
                        name = 'Michael Yan'
                        email = 'rain@rainboyan.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/graceframework/grace-fields.git'
                    developerConnection = 'scm:git:ssh://github.com:graceframework/grace-fields.git'
                    url = 'https://github.com/graceframework/grace-fields'
                }
            }

            pom.withXml {
                def pomNode = asNode()

                try {
                    pomNode.dependencyManagement.replaceNode {}
                } catch (Throwable e) {
                    // ignore
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}

afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}

jar {
    enabled = true
    archiveClassifier.set('plugin')
    includeEmptyDirs = false
}
